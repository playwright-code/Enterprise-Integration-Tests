pipeline {
    agent {
        label 'windows-latest'
    }

    environment {
        BUILD_CONFIGURATION = 'Release'
        SOLUTION = 'TestProject/TestProject.sln'
        TEST_PROJECT = 'Automated-Integration-Tests/TestProject'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Install .NET SDK') {
            steps {
                script {
                    echo 'Installing .NET SDK...'
                    sh '''
                        export DOTNET_CLI_TELEMETRY_OPTOUT=1
                        export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
                        export DOTNET_MULTILEVEL_LOOKUP=0
                        export PATH="$PATH:${env.HOME}/.dotnet/tools"
                    '''
                }
                withEnv(['DOTNET_VERSION=6.x']) {
                    sh 'dotnet --list-sdks || (wget https://dot.net/v1/dotnet-install.sh && bash ./dotnet-install.sh --channel $DOTNET_VERSION)'
                }
            }
        }

        stage('Restore NuGet Packages') {
            steps {
                script {
                    echo 'Restoring NuGet packages...'
                    sh "dotnet restore ${env.SOLUTION}"
                }
            }
        }

        stage('Build Solution') {
            steps {
                script {
                    echo 'Building solution...'
                    sh "dotnet build ${env.SOLUTION} --configuration ${env.BUILD_CONFIGURATION}"
                }
            }
        }

        stage('Install Allure Commandline') {
            steps {
                script {
                    echo 'Installing Allure Commandline...'
                    sh 'npm install -g allure-commandline --save-dev'
                }
            }
        }

        stage('Run Tests and Generate Allure Results') {
            steps {
                script {
                    echo 'Running tests and generating Allure results...'
                    sh "dotnet test ${env.TEST_PROJECT} --configuration ${env.BUILD_CONFIGURATION} --logger:\"allure\""
                }
            }
        }

        stage('Generate and Publish Allure Report') {
            steps {
                script {
                    echo 'Generating Allure report...'
                    sh '''
                        allure generate ./allure-results --clean -o ./allure-report
                        allure open ./allure-report
                    '''
                }
            }
        }

        stage('Publish Allure Report Artifact') {
            steps {
                archiveArtifacts artifacts: './allure-report/**', fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution complete.'
        }
    }
}
